I"5<h2 id="문제-설명">문제 설명</h2>

<p>카카오에 신입 개발자로 입사한 “콘”은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다.<br />
소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.<br />
수정해야 할 소스 파일이 너무 많아서 고민하던 “콘”은 소스 코드에 작성된 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 다음과 같이 개발하려고 합니다.</p>

<h2 id="용어의-정의">용어의 정의</h2>

<p><code class="language-plaintext highlighter-rouge">'('</code> 와 <code class="language-plaintext highlighter-rouge">')'</code> 로만 이루어진 문자열이 있을 경우, ‘(‘ 의 개수와 ‘)’ 의 개수가 같다면 이를 <code class="language-plaintext highlighter-rouge">균형잡힌 괄호 문자열</code>이라고 부릅니다.<br />
그리고 여기에 ‘(‘와 ‘)’의 괄호의 짝도 모두 맞을 경우에는 이를 <code class="language-plaintext highlighter-rouge">올바른 괄호 문자열</code>이라고 부릅니다.<br />
예를 들어, <code class="language-plaintext highlighter-rouge">"(()))("</code>와 같은 문자열은 “균형잡힌 괄호 문자열” 이지만 “올바른 괄호 문자열”은 아닙니다.<br />
반면에 <code class="language-plaintext highlighter-rouge">"(())()"</code>와 같은 문자열은 “균형잡힌 괄호 문자열” 이면서 동시에 “올바른 괄호 문자열” 입니다.</p>

<p>’(‘ 와 ‘)’ 로만 이루어진 문자열 w가 “균형잡힌 괄호 문자열” 이라면 다음과 같은 과정을 통해 “올바른 괄호 문자열”로 변환할 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.
</code></pre></div></div>

<p><strong>“균형잡힌 괄호 문자열”</strong> <code class="language-plaintext highlighter-rouge">p</code>가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 <strong>“올바른 괄호 문자열”</strong>로 변환한 결과를 return 하도록 <code class="language-plaintext highlighter-rouge">solution</code> 함수를 완성해 주세요.</p>

<h2 id="매개변수-설명">매개변수 설명</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">p</code>는 ‘(‘ 와 ‘)’ 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.</li>
  <li>문자열 <code class="language-plaintext highlighter-rouge">p</code>를 이루는 ‘(‘ 와 ‘)’ 의 개수는 항상 같습니다.</li>
  <li>만약 <code class="language-plaintext highlighter-rouge">p</code>가 이미 “올바른 괄호 문자열”이라면 그대로 return 하면 됩니다.</li>
</ul>

<h2 id="입출력-예">입출력 예</h2>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>”(()())()”</td>
      <td>”(()())()”</td>
    </tr>
    <tr>
      <td>”)(“</td>
      <td>”()”</td>
    </tr>
    <tr>
      <td>”()))((()”</td>
      <td>”()(())()”</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예에-대한-설명">입출력 예에 대한 설명</h2>

<h3 id="입출력-예-1">입출력 예 #1</h3>

<p>이미 “올바른 괄호 문자열” 입니다.</p>

<h3 id="입출력-예-2">입출력 예 #2</h3>

<ul>
  <li>두 문자열 u, v로 분리합니다.
    <ul>
      <li>u = <code class="language-plaintext highlighter-rouge">")("</code></li>
      <li>v = <code class="language-plaintext highlighter-rouge">""</code></li>
    </ul>
  </li>
  <li>u가 “올바른 괄호 문자열”이 아니므로 다음과 같이 새로운 문자열을 만듭니다.
    <ul>
      <li>v에 대해 1단계부터 재귀적으로 수행하면 빈 문자열이 반환됩니다.</li>
      <li>u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 <code class="language-plaintext highlighter-rouge">""</code>이 됩니다.</li>
      <li>따라서 생성되는 문자열은 <code class="language-plaintext highlighter-rouge">"("</code> + <code class="language-plaintext highlighter-rouge">""</code> + <code class="language-plaintext highlighter-rouge">")"</code> + <code class="language-plaintext highlighter-rouge">""</code>이며, 최종적으로 <code class="language-plaintext highlighter-rouge">"()"</code>로 변환됩니다.</li>
    </ul>
  </li>
</ul>

<h3 id="입출력-예-3">입출력 예 #3</h3>

<ul>
  <li>두 문자열 u, v로 분리합니다.
    <ul>
      <li>u = <code class="language-plaintext highlighter-rouge">"()"</code></li>
      <li>v = <code class="language-plaintext highlighter-rouge">"))((()"</code></li>
    </ul>
  </li>
  <li>문자열 u가 “올바른 괄호 문자열”이므로 그대로 두고, v에 대해 재귀적으로 수행합니다.</li>
  <li>다시 두 문자열 u, v로 분리합니다.
    <ul>
      <li>u = <code class="language-plaintext highlighter-rouge">"))(("</code></li>
      <li>v = <code class="language-plaintext highlighter-rouge">"()"</code></li>
    </ul>
  </li>
  <li>u가 “올바른 괄호 문자열”이 아니므로 다음과 같이 새로운 문자열을 만듭니다.
    <ul>
      <li>v에 대해 1단계부터 재귀적으로 수행하면 <code class="language-plaintext highlighter-rouge">"()"</code>이 반환됩니다.</li>
      <li>u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 <code class="language-plaintext highlighter-rouge">"()"</code>이 됩니다.</li>
      <li>따라서 생성되는 문자열은 <code class="language-plaintext highlighter-rouge">"("</code> + <code class="language-plaintext highlighter-rouge">"()"</code> + <code class="language-plaintext highlighter-rouge">")"</code> + <code class="language-plaintext highlighter-rouge">"()"</code>이며, 최종적으로 <code class="language-plaintext highlighter-rouge">"(())()"</code>를 반환합니다.
처음에 그대로 둔 문자열에 반환된 문자열을 이어 붙이면 <code class="language-plaintext highlighter-rouge">"()"</code> + <code class="language-plaintext highlighter-rouge">"(())()"</code> = <code class="language-plaintext highlighter-rouge">"()(())()"</code>가 됩니다.</li>
    </ul>
  </li>
</ul>

<h2 id="풀이">풀이</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">separate_p</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">p</span><span class="p">,</span> <span class="s">""</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
        <span class="n">test</span> <span class="o">=</span> <span class="n">p</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
        
        <span class="k">if</span> <span class="n">test</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="s">"("</span><span class="p">)</span> <span class="o">==</span> <span class="n">test</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="s">")"</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">p</span><span class="p">[:</span><span class="n">i</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>

<span class="k">def</span> <span class="nf">is_correct</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">"("</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">p</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s">"("</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
            
        <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">transform_p</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="s">"("</span> <span class="o">+</span> <span class="n">solution</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="s">")"</span>
    
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">u</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s">"("</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s">")"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s">"("</span>
            
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">""</span>
    
    <span class="n">result</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">separate_p</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">is_correct</span><span class="p">(</span><span class="n">u</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="n">u</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="n">solution</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="n">transform_p</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>
:ET